apply plugin: 'com.android.application'
apply plugin: 'com.squareup.sqldelight'
apply from: '../config/quality/quality.gradle'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId rootProject.ext.applicationId
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion

        versionCode rootProject.ext.versionCode
        // Major -> Millions, Minor -> Thousands, Bugfix -> Hundreds. E.g 1.3.72 == 1,003,072
        versionName rootProject.ext.versionName

        testInstrumentationRunner "${applicationId}.runner.RxAndroidJUnitRunner"
    }

    signingConfigs {
        // 读取release版本的签名文件
        def Properties localProps = new Properties()
        localProps.load(new FileInputStream(file('../local.properties')))

        def Properties keyProps = new Properties()
        if (localProps['keystore.properties.file']) {
            keyProps.load(new FileInputStream(file(localProps['keystore.properties.file'])))
        } else {
            // 如果读取不到'keystore.props.file'属性，就使用默认的debug keystore
            keyProps["store"] = '../debug.keystore'
            keyProps["alias"] = 'androiddebugkey'
            keyProps["storePass"] = 'android'
            keyProps["pass"] = 'android'
        }

        release {
            // release版本使用assert确保存在该属性否则报错，避免错误打包
            assert localProps['keystore.properties.file'] != null;

            storeFile file(keyProps["store"])
            keyAlias keyProps["alias"]
            storePassword keyProps["storePass"]
            keyPassword keyProps["pass"]
        }

        debug {
            storeFile file('keystore/debug.keystore')
            keyAlias 'androiddebugkey'
            storePassword 'android'
            keyPassword 'android'
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release

            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            ext.betaDistributionReleaseNotesFilePath =
                    file('../crashlytics_release_notes.txt').absolutePath
        }

        debug {
            signingConfig signingConfigs.debug

            versionNameSuffix "Debug"
            debuggable true
        }
    }

    // APK Splits
    splits {
        abi {
            enable true
            reset()
            include 'armeabi', 'x86' // 'x86', 'armeabi-v7a', 'mips'
            universalApk true
        }
    }

    // Needed because of this https://github.com/square/okio/issues/58
    lintOptions {
        warning 'InvalidPackage'
    }

    packagingOptions {
        exclude 'LICENSE'
        exclude 'README.md'
    }

    dataBinding {
        enabled = true
    }
}

dependencies {
    final SUPPORT_LIBRARY_VERSION = '24.2.1'

    final DAGGER_VERSION = '2.5'

    final RXJAVA_VERSION = '1.1.6'
    final RXANDROID_VERISON = '1.2.1'

    final RETROFIT_VERSION = '2.1.0'
    final OKHTTP_VERSION = '3.4.0'

    final SQLBRITE_VERSION = '1.1.1'
    final AUTO_VALUE_VERSION = '1.3'
    final AUTO_VALUE_GSON_VERSION = '0.4.2'

    final GLIDE_VERSION = '3.7.0'

    final TIMBER_VERSION = '4.1.2'


    def libSupportAppcompatV7 = "com.android.support:appcompat-v7:$SUPPORT_LIBRARY_VERSION"
    def libSupportRecyclerviewV7 = "com.android.support:recyclerview-v7:$SUPPORT_LIBRARY_VERSION"
    def libSupportCardviewV7 = "com.android.support:cardview-v7:$SUPPORT_LIBRARY_VERSION"
    def libSupportAnnotations = "com.android.support:support-annotations:$SUPPORT_LIBRARY_VERSION"

    def libDagger = "com.google.dagger:dagger:$DAGGER_VERSION"
    def libDaggerCompiler = "com.google.dagger:dagger-compiler:$DAGGER_VERSION"

    def libRxjava = "io.reactivex:rxjava:$RXJAVA_VERSION"
    def libRxandroid = "io.reactivex:rxandroid:$RXANDROID_VERISON"

    def libRetrofit = "com.squareup.retrofit2:retrofit:$RETROFIT_VERSION"
    def libConverterGson = "com.squareup.retrofit2:converter-gson:$RETROFIT_VERSION"
    def libAdapterRxjava = "com.squareup.retrofit2:adapter-rxjava:$RETROFIT_VERSION"
    def libLoggingInterceptor = "com.squareup.okhttp3:logging-interceptor:$OKHTTP_VERSION"

    def libSqlbrite = "com.squareup.sqlbrite:sqlbrite:$SQLBRITE_VERSION"

    def libGlide = "com.github.bumptech.glide:glide:$GLIDE_VERSION"

    def libTimber = "com.jakewharton.timber:timber:$TIMBER_VERSION"


    // App Dependencies
    compile libSupportAppcompatV7
    compile libSupportRecyclerviewV7
    compile libSupportCardviewV7
    compile libSupportAnnotations

    compile libDagger
    provided 'org.glassfish:javax.annotation:10.0-b28' // Required by Dagger2
    annotationProcessor libDaggerCompiler
    testAnnotationProcessor libDaggerCompiler
    androidTestAnnotationProcessor libDaggerCompiler

    compile libRxjava
    compile libRxandroid

    compile libRetrofit
    compile libConverterGson
    compile libAdapterRxjava
    compile libLoggingInterceptor

    compile (libSqlbrite) {
        exclude group: 'com.android.support', module: 'support-annotations'
    }

    compile libGlide

    compile libTimber

    provided "com.google.auto.value:auto-value:$AUTO_VALUE_VERSION"
    annotationProcessor "com.google.auto.value:auto-value:$AUTO_VALUE_VERSION"
    annotationProcessor 'com.ryanharter.auto.value:auto-value-parcel:0.2.4-rc2'
    provided "com.ryanharter.auto.value:auto-value-gson:$AUTO_VALUE_GSON_VERSION"
    annotationProcessor "com.ryanharter.auto.value:auto-value-gson:$AUTO_VALUE_GSON_VERSION"
    annotationProcessor 'com.squareup:javapoet:1.7.0' // https://github.com/rharter/auto-value-parcel/issues/64
}
